# 是否作为守护模式运行(后台运行)
daemonize no

# 设置进程锁文件
# pidfile /usr/local/redis-6.2.7/redis.pid

# 端口
port 6379

# 客户端超时时间
timeout 300

# 日志级别
# 常用的日志级别有:debug/verbose/notice/warning,默认是 notice.
loglevel notice

# 日志文件位置
logfile /usr/local/redis-6.2.7/log-redis.log

# 设置数据库的数量
# 注意:这里不能设置为0,不然redis会报错.
databases 16

# 指定在多长时间内,有多少次更新操作,就将数据同步到数据文件,可以多个条件配合
# save

# redis 数据库多长时间内(s)有多少次(c)更新操作时就把缓存中的数据同步到本地库,
# 例如:`save 600 2`指的是10分钟内有2次更新操作,就同步到本地库.
save 900 1
save 300 10
save 60 10000

# redis 的最大内存.
# 由于 redis 在启动时会把数据加载到内存中,
# 当数据达到最大内存时会自动把已经到期和即将到期的key值.
maxmemory 500mb

# redis 内存使用达到上限,使用 lru 算法来删除部分key,释放空间.
# 注意:默认是按照过期时间的,如果 set 时候没有加上过期时间就会导致数据写满 maxmemory.
maxmemory-policy volatile-lru

# 指定存储至本地数据库时是否压缩数据,默认为yes,Redis采用LZF压缩,如果为了节省CPU时间,
# 可以关闭该#选项,但会导致数据库文件变的巨大
rdbcompression yes

# 指定本地数据库文件名
dbfilename dump.rdb

# 指定本地数据库路径
dir /usr/local/redis-6.2.7/data

# 是否开启 redis 持久化
# 注意:是否在每次更新操作后进行日志记录,
# Redis默认是异步把数据写入磁盘,如果不开启,可能会在断电时导致一段时间内的数据丢失.
# 因为 redis 本身同步数据文件是按上面 save 条件来同步的,
# 所以有数据会在一段时间内只存在于内存中.
appendonly yes

# 指定更新日志条件,共有3个可选值：
# no：表示等操作系统进行数据缓存同步到磁盘（快）
# always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢,安全）
# everysec：表示每秒同步一次（折衷,默认值）
appendfsync everysec

# 开启保护
# 关闭 protected-mode 模式,外部可直接访问,
# 开启 protected-mode 保护模式,需配置 bind/ip 和设置访问密码,
# redis3.2+ 新增 protected-mode 配置,默认是 yes,即开启.
protected-mode yes

# 设置密码
requirepass Qaz@123456

# 允许远程连接的 ip
# bind 0.0.0.0
bind 127.0.0.1