# 参考文档(https://kalacloud.com/blog/how-to-edit-mysql-configuration-file-my-cnf-ini/)
# 注意: mysql的配置参数支持中划线和下划线,所以两者都可以.


# 客户端
[client]
default_character_set=utf8mb4
port=3307
# user=mysql8_admin


[mysql]
default_character_set=utf8mb4
# 数据包或生成的/中间的字符串的最大大小(以字节为单位).
#   注意:数据包消息缓冲区使用[net_buffer_length]进行初始化,但可以增长到[max_allowed_packet]个字节,设置为最大BLOB的最大值(1024的倍数).
max_allowed_packet=16M
# 开启命令自动补全
no_auto_rehash
auto_rehash


[mysqld]
pid_file=/var/run/mysqld/mysqld.pid
# MySQL客户端和服务器之间的本地通讯指定的一个套接字文件
socket=/var/run/mysqld/mysqld.sock
# mysql安装根目录
basedir=/var/lib/mysql
# mysql数据文件所在位置
datadir=/var/lib/mysql
# 是否跳过表的权限授权(创建数据库时使用默认密码)
# skip_grant_tables
# ip地址
#   注意:这里不能设置绑定的ip因为如果设置了,在容器内很可能不能访问.
# bind_address=localhost
# 端口
port=3307
# 用户名
#   注意:这里不用创建用户,用户在docker-compose内已经创建.
# user=mysql8_admin
# 管理员-ip
#   注意1:当连接数爆满等紧急情况下给管理员留个后门.
#   注意2:这里只能接受一个ip地址
# admin_address=localhost
# 管理员-端口
#   注意:当连接数爆满等紧急情况下给管理员留个后门.
admin_port=33071
# 设置默认时区(东八区)
default_time_zone="+8:00"
# 是否要求客户端使用加密连接
require_secure_transport=OFF
# 默认存储引擎
default_storage_engine=INNODB
# 认证插件 mysql8
#   注意1:新版本建议使用[authentication_policy=*]替代[default_authentication_plugin=mysql_native_password]
#   ​注意2:​老版本中[default_authentication_plugin​]​表示密码存储方式保留为传统方式.
authentication_policy=*
# 是否读取[default_character_set]里设置的值.
character_set_client_handshake=false
# 服务器编码字符集
character_set_server=utf8mb4
# 服务器编码字符序
collation_server=utf8mb4_unicode_ci
# 主从-如果想实现[主-从(主)-从]这样的链条式结构,需要设置.
#   注意1:设为0(默认值),从服务器上更新不会记录在从子服务器的二进制日志中.
#   注意2:设为1,从服务器更新从子服务器也会更新,但是需要启用从服务器的二进制日志.
#   注意3:这里的my.cnf是配置的主服务器所以不需要配置.
log_replica_updates=1
# 主从-设置中继日志(中继日志文件名)
#   注意:主服务器不用配置中继日志
relay_log=mysql-relay-bin
# 主从-跳过主从复制过程中遇到的错误或指定类型的错误,不让slave端复制中断.
#   注意:这个主服务器需要配置.
replica_skip_errors=all
# 主从-需要复制的数据库
#   注意:这个主服务器需要配置.
binlog_do_db=website
# 二进制日志-主从服务器唯一ID,默认是1,一般取IP最后一段.
server_id=2
# 二进制日志-文件目录(会在后面添加后缀进行区分),设置之后表示开启二进制日志.
log_bin=mysql-bin-log
# 二进制日志-最大容量
#   注意:如果日志写入后超出此大小,则服务器会关闭它并打开新的二进制日志.
max_binlog_size=100M
# 二进制日志-控制binlog写磁盘频率
sync_binlog=0
# 二进制日志-设置中继日志(中继日志文件名)
#   注意:主服务器不用配置中继日志
relay_log=mall-mysql-relay-bin
# 二进制日志-不需要记录日志的数据库
#   注意:这里的[mysql_database]仅仅是一个测试的数据库名.
binlog_ignore_db=mysql_database
# 二进制日志-最大缓存容量
binlog_cache_size=1M
# 二进制日志-定期清理时间(默认为0,表示不自动清理).
binlog_expire_logs_seconds=7
# 二进制日志-日志记录格式(STATEMENT,ROW,MIXED,三选一)
binlog_format=ROW
# 二进制日志-对于MySQL基于行的复制,此变量确定如何将行图像写入二进制日志.
binlog_row_image=MINIMAL
# 错误日志-目录
log_error=/var/log/mysqld.log
# 错误日志-记录的类型
#   注意1:0表示不记录告警信息.
#   注意2:1表示告警信息写入错误日志.
#   注意3:大于1表示各类告警信息,例如有关网络故障的信息和重新连接信息写入错误日志.
log_error_verbosity=2
# 慢查询-是否开启慢查寻
#   注意:ON或者1表示开启,OFF或者0表示关闭.
slow_query_log=1
# 慢查询日志-日志存储地址和文件名.
slow_query_log_file=/var/log/mysql-slow.log
# 慢查询日志-无论是否超时,未被索引的记录也会记录下来.
log_queries_not_using_indexes=1
# 慢查询日志-慢查询阈值(秒),SQL执行超过这个阈值将被记录在日志中
long_query_time=0.5
# 慢查询日志-慢查询仅记录扫描行数大于此参数的SQL.
min_examined_row_limit=100
# sql语句日志-是否开启
#   注意:因为查询量大,这个日志一般是关闭的.
# general_log=1
# sql语句日志-存储路径
#   注意:因为查询量大,这个日志一般是关闭的.
# general_log_file=/var/log/sql-query.log
# 允许的最大包裹
max_allowed_packet=32M
# 不区分大小写,解决[group by]无法查询的问题.
#   注意1:MySQL8默认加了[ONLY_FULL_GROUP_BY]所以不能查询.
#   注意2:取值范围{0:大小写敏感(默认),1:大小写不敏感}.
lower_case_table_names=1
# 控制主机缓存的大小,以及[host_cache]公开缓存内容的性能模式表的大小:
#   注意:取0表示禁用主机缓存(禁用后每次客户端连接时,服务器都会执行DNS查找).
host_cache_size=0
# 连接超时(单位为秒)
connect_timeout=20
# 最大连接数(默认为100)
#   注意1:一般为小于1000.太高会导致内存占用过多,MySQL服务器会卡死.
#   注意2:作为参考,小型站设置100-300.
max_connections=666
# 用户最大的连接数(默认为50)
max_user_connections=50
# 缓存空闲线程,这个数表示可重新使用保存在缓存中的线程数,当对方断开连接时,如果缓存还有空间,那么客户端的线程就会被放到缓存中,以便提高系统性能.
#   注意:根据物理内存进行设置,取值规则{1G:8,2G:16,3G:32,4G:64)等.
thread_cache_size=64
# MySQL执行排序时,使用的缓存大小.
#   注意1:增大这个缓存,提高group by,order by速度.
#   注意2:此参数的内存分配是每个连接独享.
sort_buffer_size=2M
# MySQL读入缓存的大小.
#   注意:如果对表对顺序请求比较频繁对话,可通过增加该变量值以提高性能.
read_buffer_size=128k
# 用于表的随机读取,读取时每个线程分配的缓存区大小(默认为256k)
#   注意1:一般在 128-256k之间.
#   注意2:在做[order by]排序操作时,会用到来暂做缓冲空间.
read_rnd_buffer_size=256k
# 程序中两表或多表join(联表查询)操作,为减少参与join连表的读取次数以提高性能,用来协助join完成操作.
#   注意1:当取值太小,MySQL不会将它写入磁盘文件.
#   注意2:和[sort_buffer_size]一样,此参数的内存分配是每个连接独享.
join_buffer_size=128k 
# 限制不使用文件描述符存储在缓存中的表定义的数量.
table_definition_cache=400
# 限制为所有线程在内存中打开的表数量.
table_open_cache=400                                


# 数据库的导入导出
[mysqldump]
# 限制接受的数据包大小,这里的值为MySQL服务器端和客户端在一次传送数据包的过程当中数据包的大小.
max_allowed_packet=16M