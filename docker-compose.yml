###############################
# docker-compose 配置文件
# 注意1:运行方式:docker-compose up -d
#      up 是从拉取到构建运行的全套指令.
#      -d 是后台运行.
#      --compatibility 是兼容性命令(首次执行尽量).
#      --force-recreate 重新创建容器(即使它们的配置和图像没有改变).
# 注意2:清理删除相关:
#      清理所有:docker system prune --all
#      清理卷(docker system prune方法):docker system prune --volumes
#      清理所有没有容器的镜像:docker image prune --all
#      清理超过24小时创建的镜像:docker image prune --all --filter "until=24h"
#      移除卷:docker volume prune
#      移除卷:docker network prune
# yml 内的一些注意事项:
# 1:双引号不会对字符串里面的特殊字符进行转义.
# 2:单引号会对字符串里面的特殊字符进行转义，使其失去转义功能，始终是一个普通的字符串.
# 3:yml 中如果键没有填写对应的值则等价于填入了null,
#   这时传入null就需要用引号包裹(但双引号皆可).
# 4:在 YAML 中,避免歧义的安全做法是对字符串加上引号包围.
# 参考文档1:https://zhuanlan.zhihu.com/p/387840381
# 参考文档2:https://segmentfault.com/a/1190000020340570
# 参考文档3:https://www.cnblogs.com/xiao987334176/p/12721498.html
###############################

# yml 依赖的 docker-compose 版本
version: 2.6.1

# docker-compose 昵称
# 如果未指定容器名称会在此基础上拼接生成镜像名.
name: componse

# yml 配置的服务
services:
  # mysql 主服务
  mysql8_master:
    # 镜像名
    image: mysql:8.0.30-oracle
    # 容器名称
    container_name: mysql8_master
    # 重启策略
    # restart: always
    # 环境变量
    environment:
      # 时区上海
      TZ: Asiz/Shanghai
      # 访问端口
      MYSQL_PORT: 3306
      # root 密码
      MYSQL_ROOT_PASSWORD: Qaz@123456
      # 是否允许 root 不使用密码
      MYSQL_ALLOW_EMPTY_PASSWORD: false
      # 是否允许 root 使用随机密码
      MYSQL_RANDOM_ROOT_PASSWORD: false
      # 创建数据库-数据库名字
      MYSQL_DATABASE: website
      # 创建数据库-新建用户
      # 注意:不能是 root,因为会报错,后面需要给新用户赋予权力.
      MYSQL_USER: mysql8_admin
      # 创建数据库-新建用户的密码
      MYSQL_PASSWORD: Qaz@123456
    # 端口
    ports:
      - 3306:3306
    # 目录
    volumes:
      # 数据目录
      - ./compose/mysql/mysql8_master/data:/var/lib/mysql
      # 配置文件
      # 注意1:my.cnf 设置字符集为 utf8mb4 解决 emoji 表情等特殊字符存储问题.
      # 注意2:这里的 /usr/local/etc/my.cnf 路径是 mac 的路径.
      - ./compose/mysql/mysql8_master/my.cnf:/etc/mysql/my.cnf
      # 初始化 sql 脚本挂载
      - ./compose/mysql/mysql8_master/init:/docker-entrypoint-initdb.d
      # 日志
      - ./compose/mysql/mysql8_master/logs:/logs
    # 配置网络
    networks:
      - default_network

  # mysql 从服务
  mysql8_slave:
    # 镜像名
    image: mysql:8.0.30-oracle
    # 容器名称
    container_name: mysql8_slave
    # 重启策略
    # restart: always
    # 环境变量
    environment:
      # 时区上海
      TZ: Asiz/Shanghai
      # 访问端口
      MYSQL_PORT: 3307
      # root 密码
      MYSQL_ROOT_PASSWORD: Qaz@123456
      # 是否允许 root 不使用密码
      MYSQL_ALLOW_EMPTY_PASSWORD: false
      # 是否允许 root 使用随机密码
      MYSQL_RANDOM_ROOT_PASSWORD: false
      # 创建数据库-数据库名字
      MYSQL_DATABASE: website
      # 创建数据库-新建用户
      # 注意:不能是 root,因为会报错,后面需要给新用户赋予权力.
      MYSQL_USER: mysql8_admin
      # 创建数据库-新建用户的密码
      MYSQL_PASSWORD: Qaz@123456
    # 端口
    ports:
      - 3307:3307
    # 目录
    volumes:
      # 数据目录
      - ./compose/mysql/mysql8_slave/data:/var/lib/mysql
      # 配置文件
      # 注意1:my.cnf 设置字符集为 utf8mb4 解决 emoji 表情等特殊字符存储问题.
      # 注意2:这里的 /usr/local/etc/my.cnf 路径是 mac 的路径.
      - ./compose/mysql/mysql8_slave/my.cnf:/etc/mysql/my.cnf
      # 初始化 sql 脚本挂载
      - ./compose/mysql/mysql8_slave/init:/docker-entrypoint-initdb.d
      # 日志
      - ./compose/mysql/mysql8_slave/logs:/logs
    # 配置网络
    networks:
      - default_network

  # redis 服务
  redis6:
    # 镜像名
    image: redis:6.2.7-alpine3.16
    container_name: redis6_container
    # restart: always
    ports:
      - 6379:6379
    # 暴露的端口
    # expose:
      # - 6379
    environment:
      - TZ=Asia/Shanghai
      - LANG=en_US.UTF-8
    volumes:
      # 挂载 /data 到容器.
      - ./compose/redis/data:/usr/local/redis-6.2.7/data
      # 挂载 /redis.conf 到容器
      - ./compose/redis/redis.conf:/usr/local/redis-6.2.7/redis.conf
    # docker 的运行是使用容器内的配置文件运行
    command: redis-server /usr/local/redis-6.2.7/redis.conf

    # 控制日志参数
    logging:
      options:
        max-size: '100m'
        max-file: '10'
    # 配置网络
    networks:
      - default_network
    
  # nestjs 服务
  nestjs9:
    # 镜像名
    # 如果同时指定了 build 和 image,构建的结果会被标记为相应的名字,
    # 否则会自己拼接名字,
    # 但是控制台会报一个警告,所以不建议设置,使用 compose 默认自动生成方法:
    # docker-compose昵称+docker-compose服务的默认生成方法(下横线连接).
    # image: nestjs
    # 容器名称
    container_name: nestjs_container
    # 重启策略
    # restart: always
    # 容器一直运行
    # tty: true
    # 从 Dockerfile 构建
    # context:表示包含 Dockerfile 的文件夹,也可以是指向 git repository 的 URL.
    # args:构建参数.通常用于设置 Dockerfile 内的 ARG 参数.
    # 注意:如果指定了一个相对路径,这个路径是相对于当前 yml 文件,
    #     也会被传递给 Docker daemon 用于构建.
    build:
      context: ./
      target: production
      dockerfile: Dockerfile
      args:
        - ARG NODE_ENV=production
    # 运行的命令
    # 覆盖容器内默认的 command, 也可被指定为一个列表,
    # 这也是更被推荐的方式,和 dockerfile 的格式统一.
    # command: npm run start:prod
    # 映射的端口
    # 注意:如果不设置端口映射,端口会为空,所以需要设置.
    ports:
      - 3000:3000
    # 暴露的端口
    # expose:
    #   - 3000
    # 当前服务依赖于哪些服务
    # 注意1:redis6 和 mysql8 会比当前服务更早启动.
    # 注意2:当前服务不会等 redis6 和 mysql8 再次启动才启动(redis6 未正确启动时可能会再次启动).
    depends_on:
      - redis6
      - mysql8_master
      - mysql8_slave
    # 确保每次都能连接 redis 数据库
    links:
      - redis6
      - mysql8_master
      - mysql8_slave
    # 配置网络
    networks:
      - default_network

# 网络
networks:
  # 网络名称
  # 注意:这里的网络名称会追加到 docker-compose 的 name 后面(下滑线连接),共同组成默认网络名称.
  default_network:
    # 指定使用哪个驱动程序,
    # 默认使用 bridge 表示单个主机上的网络,
    # overlay 代表跨多个节点的网络群.
    driver: bridge
    ipam:
      driver: default
      config:
        # 网段
        - subnet: 193.169.1.0/25
