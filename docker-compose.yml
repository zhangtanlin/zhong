###############################
# docker-compose 配置文件
# 注意1:运行方式:docker-compose up -d
# 注意2:首次执行尽量使用:docker-compose --compatibility up
#      --compatibility 是兼容性命令.
#      up 是从拉取到构建运行的全套指令.
#      -d 是后台运行.
# yml 内的一些注意事项:
# 1:双引号不会对字符串里面的特殊字符进行转义.
# 2:单引号会对字符串里面的特殊字符进行转义，使其失去转义功能，始终是一个普通的字符串.
# 3:yml 中如果键没有填写对应的值则等价于填入了null,
#   这时传入null就需要用引号包裹(但双引号皆可).
# 参考文档:https://zhuanlan.zhihu.com/p/387840381
###############################

# yml 依赖的 docker-compose 版本
version: 2.6.1

# docker-compose 昵称
# 如果未指定容器名称会在此基础上拼接生成镜像名.
name: componse

# yml 配置的服务
services:
  # # mysql 服务
  # mysql8:
  #   # 镜像名
  #   image: mysql:8.0
  #   # 容器名称
  #   container_name: mysql8_c
  #   # 重启策略
  #   # restart: always
  #   # 环境变量
  #   environment:
  #     # 时区上海
  #     TZ: Asiz/Shanghai
  #     # root 密码
  #     MYSQL_ROOT_PASSWORD: Qaz@123456
  #     # 访问地址
  #     MYSQL_HOST: localhost
  #     # 访问端口
  #     MYSQL_PORT: 3306
  #     # 自定义数据库-初始化用户名
  #     # 注意:不能是 root,因为会报错,后面需要给新用户赋予权力.
  #     MYSQL_USER: admin
  #     # 自定义数据库-访问密码
  #     MYSQL_PASSWORD: Qaz@123456
  #     # 自定义数据库-数据库名字
  #     MYSQL_DATABASE: website
  #     # 是否允许空的密码
  #     MYSQL_ALLOW_EMPTY_PASSWORD: true
  #     # 是否允许随机密码
  #     MYSQL_RANDOM_ROOT_PASSWORD: false
  #   # 端口
  #   ports:
  #     - 3306:3306
  #   # 目录
  #   # volumes:
  #   #   # 数据目录
  #   #   # - data:/var/lib/mysql
  #   #   # 日志
  #   #   - /usr/local/var/mysql/logs:/var/log/mysql
  #   #   # 配置文件目录
  #   #   - /usr/local/var/mysql/data:/var/log/mysql
  #   #   # 初始化目录挂载
  #   #   # - /mac/init/:/docker-entrypoint-initdb.d/
  #     # 配置文件
  #     # 注意1:my.cnf 设置字符集为 utf8mb4 解决 emoji 表情等特殊字符存储问题.
  #     # 注意2:这里的 /usr/local/etc/my.cnf 路径是 mac 的路径.
  #     # - ./docker/mysql/my.cnf:/etc/my.cnf
  #   #   # /usr/local/Cellar/mysql/8.0.23_1/bin/mysqld
  #   #   # /usr/local/var/mysql/ is case insensitive
  #   #   # /usr/local/Cellar/mysql/8.0.23_1/share/mysql/charsets/
  #   #   # Timestamp, Thread, Type, Details
  #   #   # /usr/local/Cellar/mysql/8.0.23_1/bin/mysqld
  #   #   # 8.0.23
  #   #   # /tmp/mysqlx.sock
  #   #   # /tmp/mysql.sock

  # redis 服务
  redis6:
    # 镜像名
    image: redis:6.2.7-alpine3.16
    container_name: redis6_c
    restart: always
    ports:
      - 6379:6379
    # 暴露的端口
    # expose:
      # - 6379
    environment:
      - TZ=Asia/Shanghai
      - LANG=en_US.UTF-8
    volumes:
      # 挂载 /data 到容器.
      - ./compose/redis/data:/usr/local/redis-6.2.7/data
      # 挂载 /redis.conf 到容器
      - ./compose/redis/redis.conf:/usr/local/redis-6.2.7/redis.conf
      # 挂载 /log 到容器
      - ./compose/redis/log-redis.log:/usr/local/redis-6.2.7/log-redis.log
    # docker 的运行是使用容器内的配置文件运行
    command: redis-server /usr/local/redis-6.2.7/redis.conf

    # 控制日志参数
    logging:
      options:
        max-size: '100m'
        max-file: '10'
    # 配置网络
    networks:
      - default_network
    
  # nestjs 服务
  nestjs:
    # 镜像名
    # 如果同时指定了 build 和 image,构建的结果会被标记为相应的名字,
    # 否则会自己拼接名字,但是控制台会报一个警告,所以不建议设置.
    # image: nestjs
    # 容器名称
    container_name: nestjs_c
    # 重启策略
    # restart: always
    # 容器一直运行
    # tty: true
    # 从 dockerfile 构建
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    # 运行的命令
    # command: npm run start:prod
    # 映射的端口
    # ports:
    #   - 3000:3000
    # 暴露的端口
    # expose:
    #   - 3000
    # 当前服务依赖于哪些服务
    # 注意1:redis6 会比当前服务更早启动.
    # 注意2:当前服务不会等 redis6 再次启动才启动(redis6 未正确启动时可能会再次启动).
    depends_on:
      - redis6
    # 确保每次都能连接 redis 数据库
    links:
      - redis6
    # 配置网络
    networks:
      - default_network

# 网络
networks:
  # 网络名称
  default_network:
    # 指定使用哪个驱动程序,
    # 默认使用 bridge 表示单个主机上的网络,
    # overlay 代表跨多个节点的网络群.
    driver: bridge
    ipam:
      driver: default
      config:
        # 网段
        - subnet: 193.169.1.0/25
